{"ast":null,"code":"import { COMMON_BASE_URL } from \"./source\";\nimport { Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SheltersService {\n  get shelters() {\n    return this._shelters;\n  }\n  constructor(http) {\n    this.http = http;\n    this.BASE_URL = COMMON_BASE_URL + 'shelters/';\n    this._shelters = [{\n      id: 1,\n      name: 'Kotopes',\n      city: 'Almaty',\n      country: 'Kazakhstan'\n    }, {\n      id: 2,\n      name: 'Bayterek',\n      city: 'Astana',\n      country: 'Kazakhstan'\n    }, {\n      id: 3,\n      name: 'Otyrar',\n      city: 'Shymkent',\n      country: 'Kazakhstan'\n    }];\n  }\n  getAllShelters() {\n    // return this.http.get<Shelter[]>(this.BASE_URL);\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(this._shelters);\n      }, 1000);\n    });\n  }\n  getShelterById(id) {\n    return this.http.get(`${this.BASE_URL}${id}`);\n  }\n  addShelter(shelter) {\n    // return this.http.post<Shelter>(`${this.BASE_URL}`, shelter);\n    this._shelters.push(shelter);\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(shelter);\n      }, 1000);\n    });\n  }\n  updateShelter(id, shelter) {\n    // return this.http.put<Shelter>(`${this.BASE_URL}${id}`, shelter);\n    for (let i = 0; i < this._shelters.length; i++) {\n      if (this._shelters[i].id === shelter.id) {\n        this._shelters[i] = shelter;\n        break;\n      }\n    }\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(shelter);\n      }, 1000);\n    });\n  }\n  deleteShelter(id) {\n    // return this.http.delete<any>(`${this.BASE_URL}${id}`);\n    for (let i = 0; i < this._shelters.length; i++) {\n      if (this._shelters[i].id === id) {\n        this._shelters.splice(i, 1);\n        break;\n      }\n    }\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(1);\n      }, 1000);\n    });\n  }\n}\nSheltersService.ɵfac = function SheltersService_Factory(t) {\n  return new (t || SheltersService)(i0.ɵɵinject(i1.HttpClient));\n};\nSheltersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SheltersService,\n  factory: SheltersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,eAAe,QAAO,UAAU;AACxC,SAAQC,UAAU,QAAO,MAAM;;;AAM/B,OAAM,MAAOC,eAAe;EAM1B,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,QAAQ,GAAGP,eAAe,GAAG,WAAW;IAC7C,IAAI,CAACI,SAAS,GAAI,CAChB;MAACI,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAY,CAAC,EAC/D;MAACH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAY,CAAC,EAChE;MAACH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE,UAAU;MAAEC,OAAO,EAAE;IAAY,CAAC,CACjE;EACH;EAEOC,cAAc;IACnB;IAEA,OAAO,IAAIX,UAAU,CAAYY,QAAQ,IAAG;MAC1CC,UAAU,CAAC,MAAK;QACdD,QAAQ,CAACE,IAAI,CAAC,IAAI,CAACX,SAAS,CAAC;MAC/B,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;EAEOY,cAAc,CAACR,EAAU;IAC9B,OAAO,IAAI,CAACF,IAAI,CAACW,GAAG,CAAU,GAAG,IAAI,CAACV,QAAQ,GAAGC,EAAE,EAAE,CAAC;EACxD;EAEOU,UAAU,CAACC,OAAgB;IAChC;IACA,IAAI,CAACf,SAAS,CAACgB,IAAI,CAACD,OAAO,CAAC;IAE5B,OAAO,IAAIlB,UAAU,CAAUY,QAAQ,IAAG;MACxCC,UAAU,CAAC,MAAK;QACdD,QAAQ,CAACE,IAAI,CAACI,OAAO,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;EAEOE,aAAa,CAACb,EAAU,EAAEW,OAAgB;IAC/C;IAEA,KAAI,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClB,SAAS,CAACmB,MAAM,EAAED,CAAC,EAAE,EAAC;MAC5C,IAAG,IAAI,CAAClB,SAAS,CAACkB,CAAC,CAAC,CAACd,EAAE,KAAKW,OAAO,CAACX,EAAE,EAAC;QACrC,IAAI,CAACJ,SAAS,CAACkB,CAAC,CAAC,GAAGH,OAAO;QAC3B;;;IAIJ,OAAO,IAAIlB,UAAU,CAAUY,QAAQ,IAAG;MACxCC,UAAU,CAAC,MAAK;QACdD,QAAQ,CAACE,IAAI,CAACI,OAAO,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;EAEOK,aAAa,CAAChB,EAAU;IAC7B;IAEA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClB,SAAS,CAACmB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC9C,IAAI,IAAI,CAAClB,SAAS,CAACkB,CAAC,CAAC,CAACd,EAAE,KAAKA,EAAE,EAAE;QAC/B,IAAI,CAACJ,SAAS,CAACqB,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;QAC3B;;;IAIJ,OAAO,IAAIrB,UAAU,CAASY,QAAQ,IAAG;MACvCC,UAAU,CAAC,MAAK;QACdD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MAClB,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;;AA5EWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAwB,SAAfxB,eAAe;EAAAyB,YAFd;AAAM","names":["COMMON_BASE_URL","Observable","SheltersService","shelters","_shelters","constructor","http","BASE_URL","id","name","city","country","getAllShelters","observer","setTimeout","next","getShelterById","get","addShelter","shelter","push","updateShelter","i","length","deleteShelter","splice","factory","providedIn"],"sourceRoot":"","sources":["/Users/temich/Desktop/aisha/webdev/Adopt-me-/front/Adopt-Me/src/app/services/shelters.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {COMMON_BASE_URL} from \"./source\";\nimport {Observable} from \"rxjs\";\nimport {Shelter} from \"../models/shelters\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SheltersService {\n\n  private BASE_URL: string;\n  //temp\n  private _shelters: Shelter[];\n\n  get shelters(): Shelter[] {\n    return this._shelters;\n  }\n\n  constructor(private http: HttpClient) {\n    this.BASE_URL = COMMON_BASE_URL + 'shelters/';\n    this._shelters =  [\n      {id: 1, name: 'Kotopes', city: 'Almaty', country: 'Kazakhstan'},\n      {id: 2, name: 'Bayterek', city: 'Astana', country: 'Kazakhstan'},\n      {id: 3, name: 'Otyrar', city: 'Shymkent', country: 'Kazakhstan'},\n    ];\n  }\n\n  public getAllShelters(): Observable<Shelter[]>{\n    // return this.http.get<Shelter[]>(this.BASE_URL);\n\n    return new Observable<Shelter[]>(observer => {\n      setTimeout(() => {\n        observer.next(this._shelters);\n      }, 1000);\n    });\n  }\n\n  public getShelterById(id: number): Observable<Shelter> {\n    return this.http.get<Shelter>(`${this.BASE_URL}${id}`);\n  }\n\n  public addShelter(shelter: Shelter): Observable<Shelter> {\n    // return this.http.post<Shelter>(`${this.BASE_URL}`, shelter);\n    this._shelters.push(shelter);\n\n    return new Observable<Shelter>(observer => {\n      setTimeout(() => {\n        observer.next(shelter);\n      }, 1000);\n    });\n  }\n\n  public updateShelter(id: number, shelter: Shelter): Observable<Shelter> {\n    // return this.http.put<Shelter>(`${this.BASE_URL}${id}`, shelter);\n\n    for(let i = 0; i < this._shelters.length; i++){\n      if(this._shelters[i].id === shelter.id){\n        this._shelters[i] = shelter;\n        break;\n      }\n    }\n\n    return new Observable<Shelter>(observer => {\n      setTimeout(() => {\n        observer.next(shelter);\n      }, 1000);\n    });\n  }\n\n  public deleteShelter(id: number): Observable<any> {\n    // return this.http.delete<any>(`${this.BASE_URL}${id}`);\n\n    for (let i = 0; i < this._shelters.length; i++) {\n      if (this._shelters[i].id === id) {\n        this._shelters.splice(i, 1);\n        break;\n      }\n    }\n\n    return new Observable<number>(observer => {\n      setTimeout(() => {\n        observer.next(1);\n      }, 1000);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}