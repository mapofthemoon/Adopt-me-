{"ast":null,"code":"import { COMMON_BASE_URL } from \"./source\";\nimport { Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./shelters.service\";\nimport * as i3 from \"./types-of-animal.service\";\nexport class PetsService {\n  constructor(http, sheltersService, typesOfAnimalsService) {\n    this.http = http;\n    this.sheltersService = sheltersService;\n    this.typesOfAnimalsService = typesOfAnimalsService;\n    this.BASE_URL = COMMON_BASE_URL + 'pets/';\n    //temp\n    this.pets = [{\n      id: 1,\n      name: 'Calico',\n      type_of_animal_id: this.typesOfAnimalsService.types_of_animals[0],\n      shelter: this.sheltersService.shelters[0],\n      age: 2\n    }, {\n      id: 2,\n      name: 'Korgi',\n      type_of_animal_id: this.typesOfAnimalsService.types_of_animals[1],\n      shelter: this.sheltersService.shelters[1],\n      age: 3\n    }];\n  }\n  getAllPets() {\n    // return this.http.get<Pet[]>(this.BASE_URL);\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(this.pets);\n      }, 0);\n    });\n  }\n  getPetById(id) {\n    return this.http.get(`${this.BASE_URL}${id}`);\n  }\n  addPet(pet) {\n    // return this.http.post<Pet>(`${this.BASE_URL}`, pet);\n    this.pets.push(pet);\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(pet);\n      }, 0);\n    });\n  }\n  updatePet(id, pet) {\n    // return this.http.put<Pet>(`${this.BASE_URL}${id}`, pet);\n    for (let i = 0; this.pets.length; i++) {\n      if (this.pets[i].id == pet.id) {\n        this.pets[i] = pet;\n        break;\n      }\n    }\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(pet);\n      }, 0);\n    });\n  }\n  deletePet(id) {\n    for (let i = 0; this.pets.length; i++) {\n      if (this.pets[i].id == id) {\n        this.pets.splice(i, 1);\n        break;\n      }\n    }\n    return new Observable(observer => {\n      setTimeout(() => {\n        observer.next(1);\n      }, 1000);\n    });\n  }\n}\nPetsService.ɵfac = function PetsService_Factory(t) {\n  return new (t || PetsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SheltersService), i0.ɵɵinject(i3.TypesOfAnimalService));\n};\nPetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PetsService,\n  factory: PetsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["COMMON_BASE_URL","Observable","PetsService","constructor","http","sheltersService","typesOfAnimalsService","BASE_URL","pets","id","name","type_of_animal_id","types_of_animals","shelter","shelters","age","getAllPets","observer","setTimeout","next","getPetById","get","addPet","pet","push","updatePet","i","length","deletePet","splice","factory","providedIn"],"sourceRoot":"","sources":["/Users/temich/Desktop/aisha/webdev/Adopt-me-/front/Adopt-Me/src/app/services/pets.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {COMMON_BASE_URL} from \"./source\";\nimport {Observable} from \"rxjs\";\nimport {Pet} from \"../models/pets\";\nimport {SheltersService} from \"./shelters.service\";\nimport {TypesOfAnimalService} from \"./types-of-animal.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PetsService {\n\n  private BASE_URL: string;\n\n  //temp\n  private pets: Pet[];\n\n  constructor(\n    private http: HttpClient,\n    private sheltersService: SheltersService,\n    private typesOfAnimalsService: TypesOfAnimalService\n  ) {\n    this.BASE_URL = COMMON_BASE_URL + 'pets/';\n\n    //temp\n    this.pets = [\n      {id: 1, name: 'Calico', type_of_animal_id: this.typesOfAnimalsService.types_of_animals[0], shelter: this.sheltersService.shelters[0], age: 2},\n      {id: 2, name: 'Korgi', type_of_animal_id: this.typesOfAnimalsService.types_of_animals[1], shelter: this.sheltersService.shelters[1], age: 3}\n    ];\n  }\n\n  public getAllPets(): Observable<Pet[]>{\n    // return this.http.get<Pet[]>(this.BASE_URL);\n\n    return new Observable<Pet[]>(observer => {\n      setTimeout(() => {\n        observer.next(this.pets);\n      } ,0);\n    });\n  }\n\n  public getPetById(id: number): Observable<Pet> {\n    return this.http.get<Pet>(`${this.BASE_URL}${id}`);\n  }\n\n  public addPet(pet: Pet): Observable<Pet> {\n    // return this.http.post<Pet>(`${this.BASE_URL}`, pet);\n    this.pets.push(pet);\n\n    return new Observable<Pet>(observer => {\n      setTimeout(() => {\n        observer.next(pet);\n      } ,0);\n    });\n  }\n\n  public updatePet(id: number, pet: Pet): Observable<Pet> {\n    // return this.http.put<Pet>(`${this.BASE_URL}${id}`, pet);\n\n    for(let i = 0; this.pets.length; i++){\n      if(this.pets[i].id == pet.id){\n        this.pets[i] = pet;\n        break;\n      }\n    }\n\n    return new Observable<Pet>(observer => {\n      setTimeout(() => {\n        observer.next(pet);\n      } ,0);\n    });\n\n  }\n\n  public deletePet(id: number): Observable<any> {\n    for(let i = 0; this.pets.length; i++){\n      if(this.pets[i].id == id){\n        this.pets.splice(i, 1);\n        break;\n      }\n    }\n\n    return new Observable<number>(observer => {\n      setTimeout(() => {\n        observer.next(1);\n      }, 1000);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}