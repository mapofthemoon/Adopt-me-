{"ast":null,"code":"import { COMMON_BASE_URL } from \"./source\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SheltersService {\n  get shelters() {\n    return this._shelters;\n  }\n  constructor(http) {\n    this.http = http;\n    this.BASE_URL = COMMON_BASE_URL + 'shelters/';\n    this._shelters = [{\n      id: 1,\n      name: 'Kotopes',\n      city: 'Almaty',\n      country: 'Kazakhstan'\n    }, {\n      id: 2,\n      name: 'Bayterek',\n      city: 'Astana',\n      country: 'Kazakhstan'\n    }, {\n      id: 3,\n      name: 'Otyrar',\n      city: 'Shymkent',\n      country: 'Kazakhstan'\n    }];\n  }\n  getAllShelters() {\n    return this.http.get(this.BASE_URL);\n    // return new Observable<Shelter[]>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(this._shelters);\n    //   }, 1000);\n    // });\n  }\n\n  getShelterById(id) {\n    return this.http.get(`${this.BASE_URL}${id}`);\n  }\n  addShelter(shelter) {\n    return this.http.post(`${this.BASE_URL}`, shelter);\n    // this._shelters.push(shelter);\n    //\n    // return new Observable<Shelter>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(shelter);\n    //   }, 1000);\n    // });\n  }\n\n  updateShelter(id, shelter) {\n    return this.http.put(`${this.BASE_URL}${id}`, shelter);\n    // for(let i = 0; i < this._shelters.length; i++){\n    //   if(this._shelters[i].id === shelter.id){\n    //     this._shelters[i] = shelter;\n    //     break;\n    //   }\n    // }\n    // return new Observable<Shelter>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(shelter);\n    //   }, 1000);\n    // });\n  }\n\n  deleteShelter(id) {\n    return this.http.delete(`${this.BASE_URL}${id}`);\n    // for (let i = 0; i < this._shelters.length; i++) {\n    //   if (this._shelters[i].id === id) {\n    //     this._shelters.splice(i, 1);\n    //     break;\n    //   }\n    // }\n    // return new Observable<number>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(1);\n    //   }, 1000);\n    // });\n  }\n}\n\nSheltersService.ɵfac = function SheltersService_Factory(t) {\n  return new (t || SheltersService)(i0.ɵɵinject(i1.HttpClient));\n};\nSheltersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SheltersService,\n  factory: SheltersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,eAAe,QAAO,UAAU;;;AAOxC,OAAM,MAAOC,eAAe;EAM1B,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,QAAQ,GAAGN,eAAe,GAAG,WAAW;IAC7C,IAAI,CAACG,SAAS,GAAI,CAChB;MAACI,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAY,CAAC,EAC/D;MAACH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,UAAU;MAAEC,IAAI,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAY,CAAC,EAChE;MAACH,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE,UAAU;MAAEC,OAAO,EAAE;IAAY,CAAC,CACjE;EACH;EAEOC,cAAc;IACnB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAY,IAAI,CAACN,QAAQ,CAAC;IAE9C;IACA;IACA;IACA;IACA;EACF;;EAEOO,cAAc,CAACN,EAAU;IAC9B,OAAO,IAAI,CAACF,IAAI,CAACO,GAAG,CAAU,GAAG,IAAI,CAACN,QAAQ,GAAGC,EAAE,EAAE,CAAC;EACxD;EAEOO,UAAU,CAACC,OAAgB;IAChC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAU,GAAG,IAAI,CAACV,QAAQ,EAAE,EAAES,OAAO,CAAC;IAC3D;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEOE,aAAa,CAACV,EAAU,EAAEQ,OAAgB;IAC/C,OAAO,IAAI,CAACV,IAAI,CAACa,GAAG,CAAU,GAAG,IAAI,CAACZ,QAAQ,GAAGC,EAAE,EAAE,EAAEQ,OAAO,CAAC;IAE/D;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;EACF;;EAEOI,aAAa,CAACZ,EAAU;IAC7B,OAAO,IAAI,CAACF,IAAI,CAACe,MAAM,CAAM,GAAG,IAAI,CAACd,QAAQ,GAAGC,EAAE,EAAE,CAAC;IAErD;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;EACF;;;AA5EWN,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAoB,SAAfpB,eAAe;EAAAqB,YAFd;AAAM","names":["COMMON_BASE_URL","SheltersService","shelters","_shelters","constructor","http","BASE_URL","id","name","city","country","getAllShelters","get","getShelterById","addShelter","shelter","post","updateShelter","put","deleteShelter","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/temich/Desktop/aisha/webdev/Adopt-me-/front/Adopt-Me/src/app/services/shelters.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {COMMON_BASE_URL} from \"./source\";\nimport {Observable} from \"rxjs\";\nimport {Shelter} from \"../models/shelters\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SheltersService {\n\n  private BASE_URL: string;\n  //temp\n  private _shelters: Shelter[];\n\n  get shelters(): Shelter[] {\n    return this._shelters;\n  }\n\n  constructor(private http: HttpClient) {\n    this.BASE_URL = COMMON_BASE_URL + 'shelters/';\n    this._shelters =  [\n      {id: 1, name: 'Kotopes', city: 'Almaty', country: 'Kazakhstan'},\n      {id: 2, name: 'Bayterek', city: 'Astana', country: 'Kazakhstan'},\n      {id: 3, name: 'Otyrar', city: 'Shymkent', country: 'Kazakhstan'},\n    ];\n  }\n\n  public getAllShelters(): Observable<Shelter[]>{\n    return this.http.get<Shelter[]>(this.BASE_URL);\n\n    // return new Observable<Shelter[]>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(this._shelters);\n    //   }, 1000);\n    // });\n  }\n\n  public getShelterById(id: number): Observable<Shelter> {\n    return this.http.get<Shelter>(`${this.BASE_URL}${id}`);\n  }\n\n  public addShelter(shelter: Shelter): Observable<Shelter> {\n    return this.http.post<Shelter>(`${this.BASE_URL}`, shelter);\n    // this._shelters.push(shelter);\n    //\n    // return new Observable<Shelter>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(shelter);\n    //   }, 1000);\n    // });\n  }\n\n  public updateShelter(id: number, shelter: Shelter): Observable<Shelter> {\n    return this.http.put<Shelter>(`${this.BASE_URL}${id}`, shelter);\n\n    // for(let i = 0; i < this._shelters.length; i++){\n    //   if(this._shelters[i].id === shelter.id){\n    //     this._shelters[i] = shelter;\n    //     break;\n    //   }\n    // }\n\n    // return new Observable<Shelter>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(shelter);\n    //   }, 1000);\n    // });\n  }\n\n  public deleteShelter(id: number): Observable<any> {\n    return this.http.delete<any>(`${this.BASE_URL}${id}`);\n\n    // for (let i = 0; i < this._shelters.length; i++) {\n    //   if (this._shelters[i].id === id) {\n    //     this._shelters.splice(i, 1);\n    //     break;\n    //   }\n    // }\n\n    // return new Observable<number>(observer => {\n    //   setTimeout(() => {\n    //     observer.next(1);\n    //   }, 1000);\n    // });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}